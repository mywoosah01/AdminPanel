// MyWoosah Admin Panel Complete Code
// Frontend: Next.js
// Backend: Node.js with Express
// Database: PostgreSQL

// ===============================
// 🌐 BACKEND SETUP: Node.js + Express
// ===============================

// 📂 Folder Structure:
// ├── backend
// │   ├── app.js
// │   ├── routes
// │   │   └── index.js
// │   └── controllers
// │       └── index.js
// └── frontend
//     └── pages
//         └── index.js

// backend/app.js
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const routes = require('./routes');
const { connectDB } = require('./db');

const app = express();
app.use(cors());
app.use(bodyParser.json());

// Connect to Database
connectDB();

// Routes
app.use('/api', routes);

// Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

// ===============================
// 📦 DATABASE CONNECTION
// ===============================

// backend/db.js
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB connected');
  } catch (error) {
    console.error('Database connection error:', error);
    process.exit(1);
  }
};

module.exports = { connectDB };

// ===============================
// 📋 ROUTES
// ===============================

// backend/routes/index.js
const express = require('express');
const router = express.Router();
const controllers = require('../controllers');

// Authentication Routes
router.post('/auth/register', controllers.auth.register);
router.post('/auth/login', controllers.auth.login);

// User Management Routes
router.get('/users', controllers.user.getAllUsers);
router.post('/users', controllers.user.createUser);
router.put('/users/:id', controllers.user.updateUser);
router.delete('/users/:id', controllers.user.deleteUser);

// Services Routes
router.get('/services', controllers.service.getAllServices);
router.post('/services', controllers.service.createService);
router.put('/services/:id', controllers.service.updateService);
router.delete('/services/:id', controllers.service.deleteService);

module.exports = router;

// ===============================
// 📋 CONTROLLERS
// ===============================

// backend/controllers/index.js
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const Service = require('../models/Service');

// Authentication Controller
exports.auth = {
  register: async (req, res) => {
    try {
      const { email, password } = req.body;
      const hashedPassword = await bcrypt.hash(password, 10);
      const user = new User({ email, password: hashedPassword });
      await user.save();
      res.status(201).json({ message: 'User registered successfully!' });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },
  login: async (req, res) => {
    try {
      const { email, password } = req.body;
      const user = await User.findOne({ email });
      if (!user) return res.status(401).json({ message: 'Invalid credentials' });
      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) return res.status(401).json({ message: 'Invalid credentials' });
      const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
      res.status(200).json({ token });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },
};

// User Management Controller
exports.user = {
  getAllUsers: async (req, res) => {
    try {
      const users = await User.find();
      res.status(200).json(users);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },
  createUser: async (req, res) => {
    try {
      const { email, password, role } = req.body;
      const hashedPassword = await bcrypt.hash(password, 10);
      const newUser = new User({ email, password: hashedPassword, role });
      await newUser.save();
      res.status(201).json(newUser);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },
  updateUser: async (req, res) => {
    try {
      const { id } = req.params;
      const updatedUser = await User.findByIdAndUpdate(id, req.body, { new: true });
      res.status(200).json(updatedUser);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },
  deleteUser: async (req, res) => {
    try {
      const { id } = req.params;
      await User.findByIdAndDelete(id);
      res.status(200).json({ message: 'User deleted successfully' });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },
};

// Services Controller
exports.service = {
  getAllServices: async (req, res) => {
    try {
      const services = await Service.find();
      res.status(200).json(services);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },
  createService: async (req, res) => {
    try {
      const service = new Service(req.body);
      await service.save();
      res.status(201).json(service);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },
  updateService: async (req, res) => {
    try {
      const { id } = req.params;
      const updatedService = await Service.findByIdAndUpdate(id, req.body, { new: true });
      res.status(200).json(updatedService);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },
  deleteService: async (req, res) => {
    try {
      const { id } = req.params;
      await Service.findByIdAndDelete(id);
      res.status(200).json({ message: 'Service deleted successfully' });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },
};

// ===============================
// 🛠️ FRONTEND SETUP: Next.js
// ===============================

// frontend/pages/index.js
import { useState } from 'react';
import Head from 'next/head';

export default function Home() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');

  const handleLogin = async () => {
    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });
      const data = await response.json();
      setMessage(data.token ? 'Login Successful' : 'Login Failed');
    } catch (error) {
      setMessage('An error occurred');
    }
  };

  return (
    <div>
      <Head>
        <title>MyWoosah Admin Panel</title>
      </Head>
      <h1>Welcome to MyWoosah Admin Panel</h1>
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <input
        type="password"
        placeholder="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
      <button onClick={handleLogin}>Login</button>
      <p>{message}</p>
    </div>
  );
}
